
#####################################################################
##                       Macros
#####################################################################
[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]
#recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

[display_status]

[respond]

[gcode_macro configure_extruder]
gcode:
  SET_TMC_FIELD STEPPER=extruder FIELD=pwm_meas_sd_enable VALUE=1
  SET_TMC_FIELD STEPPER=extruder FIELD=sg4_filt_en VALUE=1
  SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
  SET_TMC_FIELD STEPPER=extruder FIELD=SG4_THRS VALUE=10
  SET_TMC_FIELD STEPPER=extruder FIELD=IHOLD VALUE=0
  SET_TMC_FIELD STEPPER=extruder FIELD=THIGH VELOCITY=50
  SET_TMC_FIELD STEPPER=extruder FIELD=TCOOLTHRS VALUE=4000
  SET_TMC_FIELD STEPPER=extruder FIELD=TPWMTHRS VELOCITY=1
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERTEMPPREWARNING_VTH VALUE=2885 # 7.7 * 100 C + 2038
  {% set v = (23.882/0.009732)|int %}
  SET_TMC_FIELD STEPPER=extruder FIELD=OVERVOLTAGE_VTH VALUE={ v }

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro PRINT_START]		#PRINT_START
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2 %}

  {% set tap_x = params.TAP_X|default(x_center)|float %}
  {% set tap_y = params.TAP_Y|default(y_center)|float %}
  
  lights_on
  status_homing                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  configure_extruder

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)
  
  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 85 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    status_heating                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan
    SET_PIN PIN=nevermore VALUE=1
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    status_heating                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                            # Heat hotend to 150c

  SET_DISPLAY_TEXT MSG="Clean nozzle"   
  CLEAN_NOZZLE

  SET_DISPLAY_TEXT MSG="Eddy TAP"
  status_meshing
  G90
  G0 X{tap_x} Y{tap_y} F12000
  G0 Z2 F6000
  G4 S1
  # Perform eddy-ng TAP to set precise Z0 / probe read-height
  PROBE_EDDY_NG_TAP

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  status_meshing                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  status_heating                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp


  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  status_printing                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position
  
[gcode_macro PRINT_END]		#PRINT_END
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F10000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G28 x y
    G0 X0 Y{printer.toolhead.axis_maximum.y} F6000
    BED_MESH_CLEAR
    M117  Finshed
    lights_off    
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0



[gcode_macro CLEAN_NOZZLE]
variable_start_x: 189 # starting position - offset a bit to the right from the brush
variable_start_y: -5 # starting Y position - offset a bit to the front of the brush
variable_start_z: 4   #starting Z height. This should barely touch the surface of the brush
variable_x_min: 151     #left side of the brush 
variable_x_max: 188     #right side of the brush
variable_y_min: -5 #front side of the brush - make sure the nozzle is over the last line of bristles 
variable_y_max: 0 #rear side of the brush - make sure the nozzle is over the first line of bristles
variable_z1: 1.9 # second z height of the nozzle over the brush - this should be with the nozzle slightly sunk in
variable_z2: 0.9 # third z height of the nozzle over the brush - this should be with the nozzle fully sunk into the brush, but not touching the bottom of it.
variable_wipe_qty: 2 #how many times to run the cleaning sequence
variable_wipe_spd: 200 #cleaning speed
variable_raise_distance: 25 # z height after cleaning is done
gcode:

  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  
  G90  ; absolute positioning
  ### Move nozzle to start position
  G1 X{start_x} Y{start_y} F9000
  G1 X{x_max} Y{y_min} F9000
  G1 Z{start_z} F1500
  ### Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe left and right
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe diagonally
    G1 Z{start_z} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
   G1 Z{z1} F1500
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{start_x} Y{y_min} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  G1 X{start_x} Y{start_y} F9000 #go back to starting position
  ## Raise nozzle
  G1 Z{raise_distance}
    